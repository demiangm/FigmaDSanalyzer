import * as fs from 'fs';
import * as path from 'path';

// Define the directories
const jsonDirectory = path.join(__dirname, '../src/data');
const outputFile = path.join(__dirname, '../src/imports.ts');

interface DesignSystemComponent {
  key: string;
}

interface DesignSystemStyle {
  key: string;
}

interface ComponentsJson {
  metadata: {
    extractedAt: string;
    fileName: string;
  };
  components: Record<string, DesignSystemComponent>;
}

interface StylesJson {
  metadata: {
    extractedAt: string;
    fileName: string;
  };
  colorStyles: Record<string, string>;
  textStyles?: Record<string, string>;
  effectStyles?: Record<string, string>;
}

// Function to recursively find all JSON files
function findJsonFiles(dir: string, fileList: string[] = []): string[] {
  if (!fs.existsSync(dir)) {
    console.warn(`Directory ${dir} does not exist. Creating it...`);
    fs.mkdirSync(dir, { recursive: true });
    return fileList;
  }

  const files = fs.readdirSync(dir);

  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      findJsonFiles(filePath, fileList);
    } else if (path.extname(file) === '.json') {
      // Validate JSON structure
      try {
        const content = fs.readFileSync(filePath, 'utf8');
        const json = JSON.parse(content);
        
        // Check if it's a valid components or styles file
        if ((json.components && json.metadata) || 
            (json.colorStyles && json.metadata)) {
          fileList.push(filePath);
        } else {
          console.warn(`Skipping ${file} - Invalid design system JSON structure`);
        }
      } catch (error) {
        console.error(`Error reading ${file}:`, error);
      }
    }
  });

  return fileList;
}

// Generate the imports file
function generateImportsFile() {
  // Create data directory if it doesn't exist
  if (!fs.existsSync(jsonDirectory)) {
    fs.mkdirSync(jsonDirectory, { recursive: true });
  }

  // Find all JSON files
  const jsonFiles = findJsonFiles(jsonDirectory);
  
  // Create import statements and export array
  const imports: string[] = [];
  const exportItems: string[] = [];
  
  jsonFiles.forEach((file, index) => {
    const relativePath = path.relative(path.dirname(outputFile), file).replace(/\\/g, '/');
    const variableName = `jsonData${index}`;
    const fileName = path.basename(file, '.json');
    
    imports.push(`import ${variableName} from './${relativePath}';`);
    
    try {
      const content = fs.readFileSync(file, 'utf8');
      const json = JSON.parse(content);
      
      // Determine if it's a components or styles file
      const type = json.components ? 'components' : 'styles';
      
      exportItems.push(`  {
    name: '${fileName}',
    type: '${type}',
    data: ${variableName}
  }`);
    } catch (error) {
      console.error(`Error processing ${file}:`, error);
    }
  });
  
  // Create the file content
  const fileContent = `// Auto-generated file - DO NOT EDIT MANUALLY
// Generated by scripts/generate-json-imports.ts

${imports.join('\n')}

export interface DesignSystemFile {
  name: string;
  type: 'components' | 'styles';
  data: any;
}

export const jsonDataFiles: DesignSystemFile[] = [
${exportItems.join(',\n')}
];
`;

  // Ensure the output directory exists
  const outputDir = path.dirname(outputFile);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  // Write the file
  fs.writeFileSync(outputFile, fileContent, 'utf8');
  console.log(`Generated ${outputFile} with ${jsonFiles.length} JSON files imported.`);
}

// Run the generator
generateImportsFile();